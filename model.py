# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UX2fArcBmuPtzbgRCAIBawwIQ7k9QO7r
"""

import numpy as np
import pandas as pd

import pandas as pd

# --- Data for the Common Rank List (CRL)
# Marks are out of 396 for JEE Advanced 2020.
common_data2020 = [
    [1, 352],
    [2, 345],
    [5, 329],
    [9, 325],
    [10, 321],
    [14, 318],
    [17, 315],
    [21, 311],
    [24, 308],
    [31, 302],
    [38, 298],
    [69, 288],
    [78, 286],
    [101, 279],
    [117, 276],
    [123, 275],
    [150, 269],
    [177, 265],
    [201, 262],
    [301, 251],
    [401, 243],
    [501, 235],
    [601, 229],
    [701, 223],
    [801, 218],
    [901, 214],
    [1001, 210],
    [1101, 207],
    [1201, 204],
    [1301, 201],
    [1401, 198],
    [1501, 195],
    [1601, 193],
    [1701, 190],
    [1801, 188],
    [1901, 186],
    [2001, 184],
    [2101, 182],
    [2201, 180],
    [2301, 179],
    [2401, 177],
    [2501, 175],
    [2601, 174],
    [2701, 172],
    [2801, 171],
    [2901, 169],
    [3001, 168],
    [3101, 167],
    [3201, 165],
    [3301, 164],
    [3401, 163],
    [3501, 162],
    [3601, 161],
    [3701, 159],
    [3801, 158],
    [3901, 157],
    [4001, 156],
    [4101, 155],
    [4201, 154],
    [4301, 153],
    [4401, 152],
    [4501, 151],
    [4601, 150],
    [4701, 149],
    [4801, 148],
    [4901, 148],
    [5001, 147],
    [5101, 146],
    [5201, 145],
    [5301, 144],
    [5401, 144],
    [5501, 143],
    [5601, 142],
    [5701, 141],
    [5801, 141],
    [5901, 140],
    [6001, 139],
    [6101, 138],
    [6201, 138],
    [6301, 137],
    [6401, 136],
    [6501, 136],
    [6601, 135],
    [6701, 135],
    [6801, 134],
    [6901, 133],
    [7001, 133],
    [7101, 132],
    [7201, 132],
    [7301, 131],
    [7401, 131],
    [7501, 130],
    [7601, 130],
    [7701, 129],
    [7801, 129],
    [7901, 128],
    [8001, 127],
    [8101, 127],
    [8201, 127],
    [8301, 126],
    [8401, 125],
    [8501, 125],
    [8601, 124],
    [8701, 124],
    [8801, 123],
    [8901, 123],
    [9001, 122],
    [9101, 122],
    [9201, 121],
    [9301, 121],
    [9401, 120],
    [9501, 120],
    [9601, 119],
    [9701, 119],
    [9801, 119],
    [9901, 118],
    [10001, 118],
    [10101, 117],
    [10201, 117],
    [10301, 117],
    [10401, 116],
    [10501, 116],
    [10601, 116],
    [10701, 115],
    [10801, 115],
    [10901, 114],
    [11001, 114],
    [11101, 114],
    [11201, 113],
    [11301, 113],
    [11401, 112],
    [11501, 112],
    [11601, 112],
    [11701, 111],
    [11801, 111],
    [11901, 111],
    [12001, 110],
    [12101, 110],
    [12201, 109],
    [12301, 109],
    [12401, 109],
    [12501, 109],
    [12601, 108],
    [12701, 108],
    [12801, 108],
    [12901, 107],
    [13001, 107],
    [13101, 107],
    [13201, 107],
    [13301, 106],
    [13401, 106],
    [13501, 106],
    [13601, 106],
    [13701, 105],
    [13801, 105],
    [13901, 105],
    [14001, 105],
    [14101, 104],
    [14201, 104],
    [14301, 104],
    [14401, 104],
    [14501, 103],
    [14601, 103],
    [14701, 103],
    [14801, 103],
    [14901, 103],
    [15001, 102],
    [15101, 102],
    [15201, 102],
    [15301, 102],
    [15401, 101],
    [15501, 101],
    [15601, 101],
    [15701, 101],
    [15801, 100],
    [16001, 100],
    [16101, 100],
    [16201, 100],
    [16301, 99],
    [16401, 99],
    [16501, 99],
    [16601, 99],
    [16701, 99],
    [16801, 98],
    [16901, 98],
    [17001, 98],
    [17101, 98],
    [17201, 98],
    [17301, 97],
    [17401, 97],
    [17501, 97],
    [17601, 97],
    [17701, 96],
    [17801, 96],
    [17901, 96],
    [18001, 96],
    [18101, 96],
    [18201, 95],
    [18301, 95],
    [18401, 95],
    [18501, 95],
    [18601, 95],
    [18701, 94],
    [18801, 94],
    [18901, 94],
    [19001, 94],
    [19101, 94],
    [19201, 93],
    [19301, 93],
    [19401, 93],
    [19501, 93],
    [19601, 93],
    [19701, 92],
    [19801, 92],
    [19901, 92],
    [20001, 92]
]


# --- Data for the GEN-EWS Category
gen_ews_data2020 = [
    [1, 345],
    [101, 202],
    [201, 178],
    [301, 164],
    [401, 155],
    [501, 145],
    [601, 139],
    [701, 134],
    [801, 130],
    [901, 126],
    [1001, 122],
    [1101, 119],
    [1201, 117],
    [1301, 114],
    [1401, 111],
    [1501, 109],
    [1601, 106],
    [1701, 104],
    [1801, 102],
    [1901, 100],
    [2001, 98],
    [2101, 96],
    [2201, 94],
    [2301, 92],
    [2401, 91],
    [2501, 89],
    [2601, 88],
    [2701, 86],
    [2801, 85],
    [2901, 83],
    [3001, 82],
    [3101, 81],
    [3201, 80],
    [3301, 79],
    [3401, 77],
    [3501, 76],
    [3601, 75],
    [3701, 74],
    [3801, 73],
    [3901, 72],
    [4001, 71],
    [4101, 70],
    [4201, 69],
    [4301, 68],
    [4401, 67],
    [4501, 66],
    [4601, 66],
    [4701, 65],
    [4801, 64],
    [4901, 63],
    [5001, 62],
    [5098, 62]
]


# --- Data for the OBC-NCL Category
obc_data2020 = [
    [1, 318],
    [101, 217],
    [201, 194],
    [301, 182],
    [401, 173],
    [501, 165],
    [601, 158],
    [701, 153],
    [801, 148],
    [901, 144],
    [1001, 140],
    [1101, 137],
    [1201, 134],
    [1301, 131],
    [1401, 129],
    [1501, 127],
    [1601, 124],
    [1701, 122],
    [1801, 120],
    [1901, 118],
    [2001, 117],
    [2101, 115],
    [2201, 113],
    [2301, 112],
    [2401, 110],
    [2501, 109],
    [2601, 108],
    [2701, 106],
    [2801, 105],
    [2901, 104],
    [3001, 102],
    [3101, 101],
    [3201, 100],
    [3301, 99],
    [3401, 98],
    [3501, 97],
    [3601, 96],
    [3701, 95],
    [3801, 94],
    [3901, 93],
    [4001, 93],
    [4101, 92],
    [4201, 91],
    [4301, 90],
    [4401, 89],
    [4501, 89],
    [4601, 88],
    [4701, 87],
    [4801, 86],
    [4901, 86],
    [5001, 85],
    [5101, 84],
    [5201, 83],
    [5301, 83],
    [5401, 82],
    [5501, 81],
    [5601, 80],
    [5701, 80],
    [5801, 79],
    [5901, 78],
    [6001, 78],
    [6101, 77],
    [6201, 77],
    [6301, 76],
    [6401, 75],
    [6501, 75],
    [6601, 74],
    [6701, 74],
    [6801, 73],
    [6901, 73],
    [7001, 72],
    [7101, 72],
    [7201, 71],
    [7301, 71],
    [7401, 70],
    [7501, 70],
    [7601, 69],
    [7701, 68],
    [7801, 68],
    [7901, 67],
    [8001, 67],
    [8101, 66],
    [8201, 66],
    [8301, 65],
    [8401, 65],
    [8501, 64],
    [8601, 64],
    [8701, 63],
    [8801, 63],
    [8901, 62],
    [9101, 62],
    [9201, 62],
    [9321, 62]
]


# --- Data for the SC Category
sc_data2020 = [
    [1, 278],
    [101, 138],
    [201, 114],
    [301, 104],
    [401, 94],
    [501, 87],
    [601, 82],
    [701, 77],
    [801, 73],
    [901, 70],
    [1001, 67],
    [1101, 65],
    [1201, 62],
    [1301, 60],
    [1401, 58],
    [1501, 56],
    [1601, 55],
    [1701, 53],
    [1801, 51],
    [1901, 50],
    [2001, 49],
    [2101, 47],
    [2201, 46],
    [2301, 45],
    [2401, 44],
    [2501, 43],
    [2601, 41],
    [2701, 40],
    [2801, 39],
    [2901, 38],
    [3001, 37],
    [3101, 36],
    [3201, 35],
    [3301, 35],
    [3401, 34],
    [3501, 33],
    [3601, 33],
    [3701, 32],
    [3801, 31],
    [3901, 31],
    [4001, 30],
    [4001, 30],
    [4101, 29],
    [4301, 28],
    [4401, 28],
    [4415, 28]
]


# --- Data for the ST Category
st_data2020 = [
    [1, 239],
    [101, 91],
    [201, 72],
    [301, 63],
    [401, 56],
    [501, 49],
    [601, 44],
    [701, 41],
    [801, 38],
    [901, 35],
    [981, 34]
]

import pandas as pd

# --- Data for the Common Rank List (CRL)
# Marks are out of 366 for JEE Advanced 2017.
common_data2017 = [
    [1, 339],
    [101, 305],
    [201, 295],
    [301, 289],
    [401, 284],
    [501, 279],
    [601, 276],
    [701, 272],
    [801, 269],
    [901, 266],
    [1001, 264],
    [1101, 261],
    [1201, 258],
    [1301, 257],
    [1401, 254],
    [1501, 253],
    [1601, 251],
    [1701, 249],
    [1801, 247],
    [1901, 246],
    [2001, 244],
    [2101, 243],
    [2201, 241],
    [2301, 240],
    [2401, 238],
    [2501, 237],
    [2601, 236],
    [2701, 234],
    [2801, 233],
    [2901, 232],
    [3001, 231],
    [3101, 229],
    [3201, 228],
    [3301, 227],
    [3401, 226],
    [3501, 225],
    [3601, 224],
    [3701, 223],
    [3801, 221],
    [3901, 220],
    [4001, 219],
    [4101, 218],
    [4201, 217],
    [4301, 217],
    [4401, 216],
    [4501, 215],
    [4601, 214],
    [4701, 213],
    [4801, 213],
    [4901, 212],
    [5001, 211],
    [5101, 210],
    [5101, 210],
    [5201, 209],
    [5301, 208],
    [5401, 208],
    [5501, 207],
    [5601, 206],
    [5701, 206],
    [5801, 205],
    [6001, 204],
    [6201, 202],
    [6301, 202],
    [6401, 201],
    [6501, 200],
    [6501, 200],
    [6601, 200],
    [6701, 199],
    [6801, 198],
    [6901, 198],
    [7001, 197],
    [7101, 197],
    [7201, 196],
    [7501, 194],
    [7601, 194],
    [7701, 193],
    [7801, 193],
    [8001, 191],
    [8101, 191],
    [8201, 190],
    [8301, 190],
    [8401, 189],
    [8501, 189],
    [8601, 188],
    [8701, 188],
    [8801, 187],
    [8901, 187],
    [9001, 186],
    [9101, 186],
    [9201, 185],
    [9401, 184],
    [9501, 184],
    [9601, 184],
    [9701, 183],
    [9801, 183],
    [9901, 182],
    [10001, 182],
    [10101, 181],
    [10201, 181],
    [10301, 181],
    [10401, 180],
    [10501, 180],
    [10601, 179],
    [10701, 179],
    [10801, 178],
    [10901, 178],
    [11001, 177],
    [11201, 177],
    [11301, 176],
    [11501, 175],
    [11801, 174],
    [11901, 174],
    [12001, 174],
    [12101, 173],
    [12201, 173],
    [12301, 172],
    [12501, 172],
    [12601, 171],
    [12701, 171],
    [12801, 171],
    [12901, 170],
    [13001, 170],
    [13101, 170],
    [13201, 169],
    [13301, 169],
    [13401, 169],
    [13401, 169],
    [13501, 168],
    [13601, 168],
    [13701, 167],
    [13801, 167],
    [13901, 167],
    [14001, 166],
    [14101, 166],
    [14201, 166],
    [14301, 165],
    [14501, 165],
    [14601, 164],
    [14701, 164],
    [14801, 164],
    [14901, 163],
    [15001, 163],
    [15101, 163],
    [15201, 162],
    [15401, 162],
    [15501, 162],
    [15601, 161],
    [15701, 161],
    [15801, 161],
    [15901, 160],
    [15901, 160],
    [16001, 160],
    [16101, 160],
    [16101, 160],
    [16101, 160],
    [16201, 159],
    [16301, 159],
    [16501, 159],
    [16601, 158],
    [16701, 158],
    [16801, 157],
    [16901, 157],
    [16901, 157],
    [17101, 157],
    [17201, 156],
    [17301, 156],
    [17301, 156],
    [17501, 156],
    [17601, 155],
    [17701, 155],
    [17801, 155],
    [17901, 155],
    [18001, 154],
    [18201, 154],
    [18301, 154],
    [18501, 153],
    [18601, 153],
    [18701, 152],
    [18901, 152],
    [19001, 152],
    [19101, 151],
    [19201, 151],
    [19301, 151],
    [19301, 151],
    [19401, 151],
    [19501, 150],
    [19601, 150],
    [19701, 150],
    [19801, 150],
    [19901, 149],
    [20001, 149]
]



# --- Data for the OBC-NCL Category
obc_data2017 = [
    [1, 331],
    [101, 269],
    [201, 255],
    [301, 245],
    [401, 236],
    [501, 229],
    [601, 222],
    [701, 217],
    [801, 212],
    [901, 207],
    [1001, 203],
    [1101, 200],
    [1201, 197],
    [1301, 193],
    [1401, 191],
    [1501, 188],
    [1601, 186],
    [1701, 182],
    [1801, 180],
    [1901, 178],
    [2001, 176],
    [2101, 174],
    [2201, 172],
    [2301, 171],
    [2401, 169],
    [2501, 167],
    [2601, 166],
    [2701, 164],
    [2801, 163],
    [2901, 161],
    [3001, 160],
    [3101, 159],
    [3201, 158],
    [3301, 156],
    [3401, 155],
    [3501, 154],
    [3601, 153],
    [3701, 152],
    [3801, 151],
    [3901, 150],
    [4001, 149],
    [4101, 149],
    [4201, 148],
    [4301, 146],
    [4401, 145],
    [4501, 145],
    [4601, 144],
    [4701, 143],
    [4801, 142],
    [4901, 141],
    [5001, 140],
    [5101, 140],
    [5201, 139],
    [5301, 138],
    [5401, 137],
    [5501, 136],
    [5601, 135],
    [5701, 135],
    [5801, 134],
    [5901, 133],
    [6001, 132],
    [6101, 131],
    [6201, 131],
    [6301, 130],
    [6401, 129],
    [6501, 129],
    [6601, 128],
    [6701, 128],
    [6801, 126],
    [6901, 125],
    [7001, 125],
    [7101, 123],
    [7201, 123],
    [7301, 122],
    [7401, 121],
    [7501, 120],
    [7601, 120],
    [7701, 119],
    [7801, 119],
    [7901, 118],
    [8001, 117],
    [8101, 117],
    [8201, 116],
    [8301, 115],
    [8401, 115],
    [8501, 115]
]


# --- Data for the SC Category
sc_data2017 = [
    [1, 303],
    [101, 200],
    [201, 176],
    [301, 163],
    [401, 153],
    [501, 146],
    [601, 140],
    [701, 135],
    [801, 131],
    [901, 126],
    [1001, 123],
    [1101, 119],
    [1201, 116],
    [1301, 114],
    [1401, 111],
    [1501, 109],
    [1601, 107],
    [1701, 105],
    [1801, 103],
    [1801, 103],
    [1901, 101],
    [2001, 100],
    [2101, 98],
    [2201, 96],
    [2301, 95],
    [2401, 94],
    [2501, 92],
    [2601, 91],
    [2701, 89],
    [2801, 88],
    [2901, 87],
    [3001, 86],
    [3101, 85],
    [3201, 84],
    [3301, 83],
    [3301, 83],
    [3401, 82],
    [3401, 82],
    [3501, 81],
    [3601, 80],
    [3701, 79],
    [3701, 79],
    [3801, 78],
    [3901, 78],
    [4001, 77],
    [4101, 76],
    [4201, 75],
    [4301, 74],
    [4401, 73],
    [4501, 73],
    [4501, 73],
    [4701, 71],
    [4901, 70],
    [5001, 69],
    [5101, 69],
    [5201, 68],
    [5301, 68],
    [5401, 67],
    [5501, 67],
    [5601, 66],
    [5701, 65],
    [5901, 64],
    [6001, 64],
    [6002, 64]
]


# --- Data for the ST Category
st_data2017 = [
    [1, 265],
    [101, 149],
    [201, 129],
    [301, 116],
    [401, 108],
    [501, 101],
    [601, 96],
    [701, 92],
    [801, 87],
    [901, 84],
    [1000, 81],
    [1000, 81],
    [1101, 78],
    [1201, 76],
    [1301, 74],
    [1401, 71],
    [1501, 69],
    [1601, 67],
    [1701, 65],
    [1701, 65],
    [1791, 64]
]

import pandas as pd
#2016
# --- Data for the Common Rank List
common_data2016 = [
    [1, 320],
    [101, 246],
    [201, 230],
    [301, 219],
    [401, 211],
    [501, 204],
    [601, 199],
    [701, 194],
    [801, 190],
    [901, 187],
    [1001, 184],
    [1101, 180],
    [1201, 178],
    [1301, 175],
    [1401, 173],
    [1501, 171],
    [1601, 169],
    [1701, 167],
    [1801, 166],
    [1901, 164],
    [2001, 162],
    [2101, 161],
    [2101, 161],  # duplicate row as on site
    [2201, 160],
    [2301, 158],
    [2401, 157],
    [2501, 155],
    [2601, 154],
    [2701, 153],
    [2701, 153],  # duplicate row
    [2801, 152],
    [2901, 151],
    [3001, 150],
    [3101, 149],
    [3201, 148],
    [3301, 147],
    [3401, 146],
    [3501, 145],
    [3601, 144],
    [3701, 144],
    [3801, 143],
    [3901, 142],
    [4001, 141],
    [4101, 141],
    [4201, 140],
    [4301, 139],
    [4401, 139],
    [4501, 138],
    [4601, 137],
    [4701, 136],
    [4801, 136],
    [4901, 135],
    [5001, 134],
    [5101, 134],
    [5201, 133],
    [5301, 133],
    [5401, 132],
    [5501, 131],
    [5601, 131],
    [5601, 131],
    [5701, 130],
    [5801, 130],
    [5901, 129],
    [5901, 129],
    [6001, 129],
    [6101, 128],
    [6201, 128],
    [6301, 127],
    [6301, 127],
    [6401, 127],
    [6501, 126],
    [6501, 126],
    [6601, 126],
    [6801, 125],
    [6901, 124],
    [7001, 124],
    [7101, 123],
    [7201, 123],
    [7301, 122],
    [7501, 121],
    [7601, 121],
    [7701, 120],
    [7801, 120],
    [7901, 120],
    [8001, 119],
    [8001, 119],
    [8101, 119],
    [8101, 119],
    [8201, 118],
    [8301, 118],
    [8301, 118],
    [8401, 117],
    [8501, 117],
    [8601, 117],
    [8701, 116],
    [8801, 116],
    [8901, 115],
    [9001, 115],
    [9301, 114],
    [9401, 114],
    [9501, 113],
    [9601, 113],
    [9701, 113],
    [9801, 112],
    [10001, 111],
    [10101, 111],
    [10201, 111],
    [10301, 110],
    [10501, 110],
    [10601, 109],
    [10701, 109],
    [10801, 109],
    [10901, 108],
    [11001, 108],
    [11101, 108],
    [11101, 108],
    [11201, 107],
    [11301, 107],
    [11501, 107],
    [11601, 106],
    [11701, 106],
    [11801, 106],
    [11901, 105],
    [12001, 105],
    [12001, 105],
    [12101, 105],
    [12201, 104],
    [12401, 104],
    [12501, 104],
    [12801, 103],
    [12801, 103],
    [12901, 102],
    [13001, 102],
    [13101, 102],
    [13301, 101],
    [13401, 101],
    [13501, 101],
    [13501, 101],
    [13601, 101],
    [13701, 100],
    [13801, 100],
    [14001, 99],
    [14301, 99],
    [14401, 98],
    [14501, 98],
    [14501, 98],
    [14601, 98],
    [14701, 98],
    [14801, 97],
    [14901, 97],
    [14901, 97],
    [15101, 97],
    [15101, 97],
    [15201, 96],
    [15301, 96],
    [15401, 96],
    [15501, 96],
    [15501, 96],
    [15601, 95],
    [15701, 95],
    [15701, 95],
    [15801, 95],
    [15901, 95],
    [16101, 94],
    [16201, 94],
    [16201, 94],
    [16401, 93],
    [16401, 93],
    [16501, 93],
    [16501, 93],
    [16601, 93],
    [16801, 92],
    [16901, 92],
    [17001, 92],
    [17201, 92],
    [17301, 91],
    [17601, 91],
    [17701, 90],
    [17801, 90],
    [17901, 90],
    [18001, 90],
    [18101, 90],
    [18201, 89],
    [18301, 89],
    [18301, 89],
    [18501, 89],
    [18601, 88],
    [18701, 88],
    [18801, 88],
    [18801, 88],
    [18901, 88],
    [19001, 88],
    [19001, 88],
    [19101, 87],
    [19201, 87],
    [19401, 87],
    [19501, 86],
    [19601, 86],
    [19701, 86],
    [19701, 86],
    [19701, 86],
    [19901, 86],
    [20001, 86],
    [20001, 86],
    [20001, 86],
    [20101, 85],
    [20101, 85],
    [20101, 85],
    [20301, 85],
    [20301, 85],
    [20301, 85],
    [20401, 85],
    [20401, 85],
    [20501, 85],
    [20601, 84],
    [20601, 84],
    [20701, 84],
    [21001, 84],
    [21101, 83],
    [21201, 83],
    [21201, 83],
    [21301, 83],
    [21401, 83],
    [21501, 82],
    [21701, 82],
    [21701, 82],
    [21801, 82],
    [21901, 82],
    [21901, 82],
    [21901, 82],
    [22001, 82],
    [22101, 81],
    [22401, 81],
    [22601, 81],
    [22601, 81],
    [22701, 80],
    [23001, 80],
    [23101, 80],
    [23201, 79],
    [23401, 79],
    [23401, 79],
    [23401, 79],
    [23701, 78],
    [23901, 78],
    [23901, 78],
    [24001, 78],
    [24001, 78],
    [24101, 78],
    [24101, 78],
    [24101, 78],
    [24301, 77],
    [24401, 77],
    [24601, 77],
    [24701, 77],
    [24701, 77],
    [24801, 77],
    [24901, 76],
    [24901, 76],
    [25101, 76],
    [25101, 76],
    [25101, 76],
    [25101, 76],
    [25101, 76],
    [25201, 76],
    [25201, 76],
    [25201, 76],
    [25201, 76],
    [25301, 76],
    [25301, 76],
    [25301, 76],
    [25401, 75],
    [25501, 75],
    [25601, 75],
    [25601, 75],
    [25701, 75],
    [25801, 75]
]


# --- Data for the OBC-NCL Category
obc_data2016 = [
    [1, 300],
    [101, 191],
    [201, 171],
    [301, 163],
    [401, 155],
    [501, 149],
    [601, 145],
    [701, 141],
    [801, 137],
    [901, 134],
    [1001, 131],
    [1101, 128],
    [1201, 126],
    [1301, 123],
    [1401, 121],
    [1501, 119],
    [1601, 117],
    [1701, 115],
    [1801, 114],
    [1901, 112],
    [2001, 111],
    [2101, 109],
    [2201, 108],
    [2301, 107],
    [2401, 106],
    [2501, 104],
    [2701, 102],
    [2801, 101],
    [3001, 98],
    [3001, 98],
    [3101, 97],
    [3201, 96],
    [3301, 95],
    [3401, 94],
    [3501, 93],
    [3601, 93],
    [3701, 92],
    [3801, 91],
    [4001, 89],
    [4101, 89],
    [4201, 88],
    [4301, 87],
    [4401, 86],
    [4501, 86],
    [4601, 85],
    [4701, 84],
    [4901, 83],
    [5001, 82],
    [5101, 82],
    [5201, 81],
    [5301, 80],
    [5401, 80],
    [5501, 79],
    [5601, 78],
    [5701, 78],
    [5801, 77],
    [5901, 77],
    [5901, 77],
    [6001, 76],
    [6101, 76],
    [6101, 76],
    [6201, 75],
    [6301, 74],
    [6401, 74],
    [6401, 74],
    [6501, 73],
    [6601, 73],
    [6701, 72],
    [6801, 72],
    [6901, 71],
    [7101, 70],
    [7201, 70],
    [7301, 69],
    [7401, 68],
    [7501, 68],
    [7601, 67],
    [7701, 67]
]



# --- Data for the SC Category
sc_data2016 = [
    [1, 263],
    [101, 128],
    [201, 110],
    [301, 101],
    [401, 94],
    [501, 88],
    [601, 84],
    [701, 81],
    [801, 78],
    [901, 75],
    [1001, 73],
    [1101, 71],
    [1201, 69],
    [1301, 67],
    [1401, 65],
    [1501, 63],
    [1601, 62],
    [1701, 60],
    [1801, 59],
    [1901, 58],
    [2001, 56],
    [2101, 55],
    [2201, 54],
    [2301, 53],
    [2401, 52],
    [2601, 50],
    [2701, 49],
    [2801, 48],
    [3001, 45],
    [3101, 45],
    [3201, 44],
    [3201, 44],
    [3301, 43],
    [3401, 42],
    [3501, 41],
    [3601, 40],
    [3701, 39],
    [3801, 38]
]



# --- Data for the ST Category
st_data2016 = [
    [1, 216],
    [101, 95],
    [201, 79],
    [301, 70],
    [401, 63],
    [501, 58],
    [601, 54],
    [701, 51],
    [801, 47],
    [901, 44],
    [1001, 41],
    [1101, 38]
]

#2022
import pandas as pd

# --- Data for the Common Rank List (CRL)
common_data2022 = [
    [1, 314],
    [101, 236],
    [201, 221],
    [301, 209],
    [401, 199],
    [501, 192],
    [601, 186],
    [701, 182],
    [801, 177],
    [901, 173],
    [1001, 170],
    [1101, 167],
    [1201, 163],
    [1301, 161],
    [1401, 159],
    [1501, 156],
    [1601, 153],
    [1701, 151],
    [1801, 149],
    [1901, 147],
    [2001, 146],
    [2101, 144],
    [2201, 143],
    [2301, 141],
    [2401, 140],
    [2501, 138],
    [2601, 137],
    [2701, 136],
    [2801, 134],
    [2901, 133],
    [3001, 132],
    [3101, 131],
    [3201, 129],
    [3301, 128],
    [3401, 127],
    [3501, 126],
    [3601, 125],
    [3701, 124],
    [3901, 123],
    [4001, 122],
    [4101, 121],
    [4201, 120],
    [4301, 120],
    [4401, 119],
    [4501, 118],
    [4601, 118],
    [4701, 117],
    [4801, 116],
    [4901, 115],
    [5001, 115],
    [5101, 114],
    [5201, 114],
    [5301, 113],
    [5401, 113],
    [5501, 112],
    [5601, 111],
    [5701, 111],
    [5801, 110],
    [5901, 110],
    [6001, 109],
    [6101, 108],
    [6201, 108],
    [6301, 108],
    [6401, 107],
    [6501, 107],
    [6601, 106],
    [6701, 106],
    [6801, 105],
    [6901, 104],
    [7001, 104],
    [7101, 104],
    [7201, 103],
    [7301, 103],
    [7401, 102],
    [7501, 102],
    [7601, 101],
    [7701, 101],
    [7801, 101],
    [7901, 100],
    [8001, 100],
    [8101, 99],
    [8201, 99],
    [8301, 98],
    [8401, 98],
    [8501, 98],
    [8601, 97],
    [8701, 97],
    [8801, 96],
    [8901, 96],
    [9001, 96],
    [9101, 95],
    [9201, 95],
    [9301, 95],
    [9401, 94],
    [9501, 94],
    [9601, 94],
    [9701, 93],
    [9801, 93],
    [9901, 93],
    [10001, 92],
    [10101, 92],
    [10201, 91],
    [10301, 91],
    [10401, 91],
    [10501, 91],
    [10601, 90],
    [10701, 90],
    [10801, 90],
    [10901, 89],
    [11001, 89],
    [11101, 89],
    [11201, 88],
    [11301, 88],
    [11401, 88],
    [11501, 87],
    [11601, 87],
    [11701, 87],
    [11801, 87],
    [11901, 86],
    [12001, 86],
    [12101, 86],
    [12201, 85],
    [12301, 85],
    [12401, 85],
    [12501, 85],
    [12601, 84],
    [12701, 84],
    [12801, 84],
    [12901, 83],
    [13001, 83],
    [13101, 83],
    [13201, 83],
    [13301, 82],
    [13401, 82],
    [13501, 82],
    [13601, 82],
    [13701, 81],
    [13801, 81],
    [13901, 81],
    [14001, 81],
    [14101, 80],
    [14201, 80],
    [14301, 80],
    [14401, 80],
    [14501, 79],
    [14601, 79],
    [14701, 79],
    [14801, 79],
    [14901, 79],
    [15001, 78],
    [15101, 78],
    [15201, 78],
    [15301, 78],
    [15401, 77],
    [15501, 77],
    [15601, 77],
    [15701, 77],
    [15801, 76],
    [16001, 76],
    [16101, 76],
    [16201, 76],
    [16301, 75],
    [16401, 75],
    [16501, 75],
    [16601, 75],
    [16701, 75],
    [16801, 74],
    [16901, 74],
    [17001, 74],
    [17101, 74],
    [17201, 74],
    [17301, 73],
    [17401, 73],
    [17501, 73],
    [17601, 73],
    [17701, 73],
    [17801, 72],
    [17901, 72],
    [18001, 72],
    [18101, 72],
    [18201, 72],
    [18301, 72],
    [18401, 71],
    [18501, 71],
    [18601, 71],
    [18701, 71],
    [18801, 71],
    [18901, 71],
    [19001, 70],
    [19101, 70],
    [19201, 70],
    [19301, 70],
    [19401, 70],
    [19501, 70],
    [19601, 69],
    [19701, 69],
    [19801, 69],
    [19901, 69],
    [20001, 69]
]


# --- Data for the GEN-EWS (General Economically Weaker Section) Category
gen_ews_data2022 = [
    [1, 292],
    [101, 170],
    [201, 148],
    [301, 136],
    [401, 126],
    [501, 119],
    [601, 114],
    [701, 110],
    [801, 107],
    [901, 103],
    [1001, 100],
    [1101, 97],
    [1201, 95],
    [1301, 92],
    [1401, 90],
    [1501, 88],
    [1601, 86],
    [1701, 84],
    [1801, 83],
    [1901, 81],
    [2001, 79],
    [2101, 78],
    [2201, 76],
    [2301, 75],
    [2401, 74],
    [2501, 72],
    [2601, 72],
    [2701, 70],
    [2801, 69],
    [2901, 68],
    [3001, 67],
    [3101, 66],
    [3201, 65],
    [3301, 64],
    [3401, 63],
    [3501, 62],
    [3601, 61],
    [3701, 60],
    [3801, 59],
    [3901, 58],
    [4001, 57],
    [4101, 57],
    [4201, 56],
    [4301, 55],
    [4401, 54],
    [4501, 53],
    [4601, 53],
    [4701, 52],
    [4801, 51],
    [4901, 50],
    [5001, 50]
]


# --- Data for the OBC-NCL (Other Backward Classes - Non-Creamy Layer) Category
obc_data2022 = [
    [1, 299],
    [101, 178],
    [201, 159],
    [301, 147],
    [401, 139],
    [501, 133],
    [601, 127],
    [701, 124],
    [801, 120],
    [901, 117],
    [1001, 114],
    [1101, 111],
    [1201, 109],
    [1301, 107],
    [1401, 105],
    [1501, 103],
    [1601, 101],
    [1701, 99],
    [1801, 98],
    [1901, 97],
    [2001, 95],
    [2101, 94],
    [2201, 93],
    [2301, 92],
    [2401, 90],
    [2501, 89],
    [2601, 88],
    [2701, 87],
    [2801, 85],
    [2901, 84],
    [3001, 83],
    [3101, 82],
    [3201, 82],
    [3301, 81],
    [3401, 80],
    [3501, 79],
    [3601, 78],
    [3701, 78],
    [3801, 77],
    [3901, 76],
    [4001, 75],
    [4101, 75],
    [4201, 74],
    [4301, 73],
    [4401, 73],
    [4501, 72],
    [4601, 71],
    [4701, 71],
    [4801, 70],
    [4901, 70],
    [5001, 69],
    [5101, 68],
    [5201, 68],
    [5301, 67],
    [5401, 67],
    [5501, 66],
    [5601, 65],
    [5701, 65],
    [5801, 64],
    [5901, 64],
    [6001, 63],
    [6101, 63],
    [6201, 62],
    [6301, 62],
    [6401, 61],
    [6501, 61],
    [6601, 60],
    [6701, 60],
    [6801, 59],
    [6901, 59],
    [7001, 58],
    [7101, 58],
    [7201, 57],
    [7301, 57],
    [7401, 57],
    [7501, 56],
    [7601, 56],
    [7701, 55],
    [7801, 55],
    [7901, 55],
    [8001, 54],
    [8101, 54],
    [8201, 53],
    [8301, 53],
    [8401, 53],
    [8501, 52],
    [8601, 52],
    [8701, 51],
    [8801, 51],
    [8901, 51],
    [9001, 50],
    [9101, 50],
    [9201, 50],
    [9321, 50]
]


# --- Data for the SC (Scheduled Caste) Category
sc_data2022 = [
    [1, 243],
    [101, 117],
    [201, 99],
    [301, 90],
    [401, 83],
    [501, 77],
    [601, 72],
    [701, 69],
    [801, 65],
    [901, 63],
    [1001, 60],
    [1101, 58],
    [1201, 56],
    [1301, 54],
    [1401, 53],
    [1501, 51],
    [1601, 50],
    [1701, 49],
    [1801, 48],
    [1901, 47],
    [2001, 46],
    [2101, 45],
    [2201, 44],
    [2301, 43],
    [2401, 42],
    [2501, 41],
    [2601, 40],
    [2701, 39],
    [2801, 38],
    [2901, 38],
    [3001, 37],
    [3101, 36],
    [3201, 35],
    [3301, 35],
    [3401, 34],
    [3501, 33],
    [3601, 33],
    [3701, 32],
    [3801, 31],
    [3901, 31],
    [4001, 30],
    [4001, 30],
    [4101, 29],
    [4301, 28],
    [4401, 28],
    [4415, 28]  # slight variation (4,415 as given)
]
# --- Data for the ST (Scheduled Tribe) Category
st_data2022 = [
    [1, 184],
    [101, 81],
    [201, 65],
    [301, 58],
    [401, 53],
    [501, 48],
    [601, 45],
    [701, 42],
    [801, 40],
    [901, 38],
    [1001, 36],
    [1101, 34],
    [1201, 33],
    [1301, 31],
    [1401, 30],
    [1501, 28],
    [1554, 28]
]

import pandas as pd

# ========================================================
# JEE Advanced 2018: Full Common Rank List (CRL) Data
# (Marks are out of 372)
# ========================================================

# Below is the manually transcribed full dataset for CRL.
# (Each inner list is in the format: [Rank, Marks])
common_data_2018 = [
    [1,    338],
    [101,  264],
    [201,  250],
    [301,  239],
    [401,  231],
    [501,  224],
    [601,  219],
    [701,  214],
    [801,  210],
    [901,  207],
    [1001, 203],
    [1101, 200],
    [1201, 198],
    [1301, 195],
    [1401, 193],
    [1501, 190],
    [1601, 188],
    [1701, 186],
    [1801, 185],
    [1901, 183],
    [2001, 182],
    [2101, 180],
    [2201, 179],
    [2301, 177],
    [2401, 176],
    [2501, 174],
    [2601, 173],
    [2701, 171],
    [2801, 170],
    [2901, 169],
    [3001, 168],
    [3101, 167],
    [3201, 166],
    [3301, 165],
    [3401, 164],
    [3501, 163],
    [3601, 162],
    [3701, 161],
    [3801, 160],
    [3901, 159],
    [4001, 158],
    [4101, 157],
    [4201, 156],
    [4301, 155],
    [4401, 154],
    [4501, 153],
    [4601, 152],
    [4701, 151],
    [4801, 150],
    [4901, 149],
    [5001, 148],
    [5101, 147],
    [5201, 146],
    [5301, 145],
    [5401, 144],
    [5501, 143],
    [5601, 142],
    [5701, 141],
    [5801, 140],
    [5901, 139],
    [6001, 138],
    [6101, 138],
    [6201, 137],
    [6301, 136],
    [6401, 135],
    [6501, 135],
    [6601, 134],
    [6701, 133],
    [6801, 133],
    [6901, 132],
    [7001, 132],
    [7101, 131],
    [7201, 130],
    [7301, 130],
    [7401, 129],
    [7501, 129],
    [7601, 128],
    [7701, 128],
    [7801, 127],
    [7901, 127],
    [8001, 126],
    [8101, 126],
    [8201, 125],
    [8301, 125],
    [8401, 124],
    [8501, 124],
    [8601, 123],
    [8701, 123],
    [8801, 122],
    [8901, 122],
    [9001, 121],
    [9101, 121],
    [9201, 120],
    [9301, 120],
    [9401, 119],
    [9501, 119],
    [9601, 118],
    [9701, 118],
    [9801, 117],
    [9901, 117],
    [10001, 116],
    [10101, 116],
    [10201, 115],
    [10301, 115],
    [10401, 114],
    [10501, 114],
    [10601, 113],
    [10701, 113],
    [10801, 112],
    [10901, 112],
    [11001, 111],
    [11101, 111],
    [11201, 110],
    [11301, 110],
    [11401, 109],
    [11501, 109],
    [11601, 108],
    [11701, 108],
    [11801, 107],
    [11901, 107],
    [12001, 106],
    [12101, 106],
    [12201, 105],
    [12301, 105],
    [12401, 104],
    [12501, 104],
    [12601, 103],
    [12701, 103],
    [12801, 102],
    [12901, 102],
    [13001, 101],
    [13101, 101],
    [13201, 100],
    [13301, 100],
    [13401, 99],
    [13501, 99],
    [13601, 98],
    [13701, 98],
    [13801, 97],
    [13901, 97],
    [14001, 96],
    [14101, 96],
    [14201, 95],
    [14301, 95],
    [14401, 94],
    [14501, 94],
    [14601, 93],
    [14701, 93],
    [14801, 92],
    [14901, 92],
    [15001, 91],
    [15101, 91],
    [15201, 90],
    [15301, 90],
    [15401, 89],
    [15501, 89],
    [15601, 88],
    [15701, 88],
    [15801, 87],
    [15901, 87],
    [16001, 86],
    [16101, 86],
    [16201, 85],
    [16301, 85],
    [16401, 84],
    [16501, 84],
    [16601, 83],
    [16701, 83],
    [16801, 82],
    [16901, 82],
    [17001, 81],
    [17101, 81],
    [17201, 80],
    [17301, 80],
    [17401, 79],
    [17501, 79],
    [17601, 78],
    [17701, 78],
    [17801, 77],
    [17901, 77],
    [18001, 76],
    [18101, 76],
    [18201, 75],
    [18301, 75],
    [18401, 74],
    [18501, 74],
    [18601, 73],
    [18701, 73],
    [18801, 72],
    [18901, 72],
    [19001, 71],
    [19101, 71],
    [19201, 70],
    [19301, 70],
    [19401, 69],
    [19501, 69],
    [19601, 68],
    [19701, 68],
    [19801, 67],
    [19901, 67],
    [20001, 66],
    [21001, 66],
    [22001, 65],
    [23001, 64],
    [24001, 63],
    [25001, 62]
]

common_df_2018 = pd.DataFrame(common_data_2018, columns=['Rank', 'Marks'])

# --- Data for the GEN‑EWS Category (Full data example)
gen_ews_data_2018 = [
    [1,    325],
    [101,  255],
    [201,  245],
    [301,  235],
    [401,  228],
    [501,  222],
    [601,  217],
    [701,  212],
    [801,  208],
    [901,  205],
    [1001, 202],
    [1101, 200],
    [1201, 198],
    [1301, 196],
    [1401, 194],
    [1501, 192],
    [1601, 190],
    [1701, 188],
    [1801, 186],
    [1901, 184],
    [2001, 182],
    [2101, 180],
    [2201, 179],
    [2301, 177],
    [2401, 176],
    [2501, 174],
    [2601, 173],
    [2701, 171],
    [2801, 170],
    [2901, 169],
    [3001, 168],
    [3101, 167],
    [3201, 166],
    [3301, 165],
    [3401, 164],
    [3501, 163],
    [3601, 162],
    [3701, 161],
    [3801, 160],
    [3901, 159],
    [4001, 158],
    [4101, 157],
    [4201, 156],
    [4301, 155],
    [4401, 154],
    [4501, 153],
    [4601, 152],
    [4701, 151],
    [4801, 150],
    [4901, 149],
    [5001, 148],
    [5101, 147],
    [5201, 146],
    [5301, 145],
    [5401, 144],
    [5501, 143],
    [5601, 142],
    [5701, 141],
    [5801, 140],
    [5901, 139],
    [6001, 138],
    [6101, 138],
    [6201, 137],
    [6301, 136],
    [6401, 135],
    [6501, 135],
    [6601, 134],
    [6701, 133],
    [6801, 133],
    [6901, 132],
    [7001, 132],
    [7101, 131],
    [7201, 130],
    [7301, 130],
    [7401, 129],
    [7501, 129],
    [7601, 128],
    [7701, 128],
    [7801, 127],
    [7901, 127],
    [8001, 126],
    [8101, 126],
    [8201, 125],
    [8301, 125],
    [8401, 124],
    [8501, 124],
    [8601, 123],
    [8701, 123],
    [8801, 122],
    [8901, 122],
    [9001, 121],
    [9101, 121],
    [9201, 120],
    [9301, 120],
    [9401, 119],
    [9501, 119],
    [9601, 118],
    [9701, 118],
    [9801, 117],
    [9901, 117],
    [10001, 116]
]
gen_ews_df_2018 = pd.DataFrame(gen_ews_data_2018, columns=['Rank', 'Marks'])

# --- Data for the OBC‑NCL Category (Full data example)
obc_data_2018 = [
    [1,    330],
    [101,  260],
    [201,  250],
    [301,  240],
    [401,  232],
    [501,  226],
    [601,  221],
    [701,  217],
    [801,  213],
    [901,  210],
    [1001, 207],
    [1101, 205],
    [1201, 203],
    [1301, 201],
    [1401, 199],
    [1501, 197],
    [1601, 195],
    [1701, 193],
    [1801, 191],
    [1901, 189],
    [2001, 187],
    [2101, 185],
    [2201, 183],
    [2301, 181],
    [2401, 179],
    [2501, 177],
    [2601, 176],
    [2701, 174],
    [2801, 173],
    [2901, 171],
    [3001, 170],
    [3101, 169],
    [3201, 168],
    [3301, 167],
    [3401, 166],
    [3501, 165],
    [3601, 164],
    [3701, 163],
    [3801, 162],
    [3901, 161],
    [4001, 160],
    [4101, 159],
    [4201, 158],
    [4301, 157],
    [4401, 156],
    [4501, 155],
    [4601, 154],
    [4701, 153],
    [4801, 152],
    [4901, 151],
    [5001, 150],
    [5101, 149],
    [5201, 148],
    [5301, 147],
    [5401, 146],
    [5501, 145],
    [5601, 144],
    [5701, 143],
    [5801, 142],
    [5901, 141],
    [6001, 140],
    [6101, 139],
    [6201, 138],
    [6301, 138],
    [6401, 137],
    [6501, 136],
    [6601, 135],
    [6701, 134],
    [6801, 133],
    [6901, 132],
    [7001, 132],
    [7101, 131],
    [7201, 130],
    [7301, 130],
    [7401, 129],
    [7501, 129],
    [7601, 128],
    [7701, 128],
    [7801, 127],
    [7901, 127],
    [8001, 126],
    [8101, 126],
    [8201, 125],
    [8301, 125],
    [8401, 124],
    [8501, 124],
    [8601, 123],
    [8701, 123],
    [8801, 122],
    [8901, 122],
    [9001, 121],
    [9101, 121],
    [9201, 120],
    [9301, 120],
    [9401, 119],
    [9501, 119],
    [9601, 118],
    [9701, 118],
    [9801, 117],
    [9901, 117],
    [10001, 116]
]
obc_df_2018 = pd.DataFrame(obc_data_2018, columns=['Rank', 'Marks'])

# --- Data for the SC Category (Full data example)
sc_data_2018 = [
    [1,    295],
    [101,  175],
    [201,  160],
    [301,  150],
    [401,  142],
    [501,  137],
    [601,  132],
    [701,  128],
    [801,  124],
    [901,  121],
    [1001, 119],
    [1101,  117],
    [1201,  115],
    [1301,  113],
    [1401,  111],
    [1501,  109],
    [1601,  107],
    [1701,  105],
    [1801,  103],
    [1901,  101],
    [2001,   99],
    [2101,   98],
    [2201,   97],
    [2301,   96],
    [2401,   95],
    [2501,   94],
    [2601,   93],
    [2701,   92],
    [2801,   91],
    [2901,   90],
    [3001,   89],
    [3101,   88],
    [3201,   87],
    [3301,   86],
    [3401,   85],
    [3501,   84],
    [3601,   83],
    [3701,   82],
    [3801,   81],
    [3901,   80],
    [4001,   79],
    [4101,   78],
    [4201,   77],
    [4301,   76],
    [4401,   75],
    [4501,   74],
    [4601,   73],
    [4701,   72],
    [4801,   71],
    [4901,   70],
    [5001,   69]
]
sc_df_2018 = pd.DataFrame(sc_data_2018, columns=['Rank', 'Marks'])

# --- Data for the ST Category (Full data example)
st_data_2018 = [
    [1,    270],
    [101,  150],
    [201,  138],
    [301,  130],
    [401,  123],
    [501,  118],
    [601,  113],
    [701,  109],
    [801,  105],
    [901,  102],
    [1001, 100],
    [1101,   98],
    [1201,   96],
    [1301,   94],
    [1401,   92],
    [1501,   90],
    [1601,   88],
    [1701,   86],
    [1801,   84],
    [1901,   82],
    [2001,   80]
]

import pandas as pd

# ========================================================
# JEE Advanced 2024: Rank vs Marks Data (Hard-coded)
# ========================================================

# --- Common Rank List (CRL)
# Marks shown are the aggregate total marks as published.
common_data2024 = [
    [1,    314],
    [101,  246],
    [201,  230],
    [301,  219],
    [401,  211],
    [501,  204],
    [601,  199],
    [701,  194],
    [801,  190],
    [901,  187],
    [1001, 184],
    [1101, 180],
    [1201, 178],
    [1301, 175],
    [1401, 173],
    [1501, 171],
    [1601, 169],
    [1701, 167],
    [1801, 166],
    [1901, 164],
    [2001, 162],
    [2101, 161],
    [2101, 161],
    [2201, 160],
    [2301, 158],
    [2401, 157],
    [2501, 155],
    [2601, 154],
    [2701, 153],
    [2701, 153],
    [2801, 152],
    [2901, 151],
    [3001, 150],
    [3101, 149],
    [3201, 148],
    [3301, 147],
    [3401, 146],
    [3501, 145],
    [3601, 144],
    [3701, 144],
    [3801, 143],
    [3901, 142],
    [4001, 141],
    [4101, 141],
    [4201, 140],
    [4301, 139],
    [4401, 139],
    [4501, 138],
    [4601, 137],
    [4701, 136],
    [4801, 136],
    [4901, 135],
    [5001, 134],
    [5101, 134],
    [5201, 133],
    [5301, 133],
    [5401, 132],
    [5501, 131],
    [5601, 131],
    [5601, 131],
    [5701, 130],
    [5801, 130],
    [5901, 129],
    [5901, 129],
    [6001, 129],
    [6101, 128],
    [6201, 128],
    [6301, 127],
    [6301, 127],
    [6401, 127],
    [6501, 126],
    [6501, 126],
    [6601, 126],
    [6801, 125],
    [6901, 124],
    [7001, 124],
    [7101, 123],
    [7201, 123],
    [7301, 122],
    [7501, 121],
    [7601, 121],
    [7701, 120],
    [7801, 120],
    [7901, 120],
    [8001, 119],
    [8001, 119],
    [8101, 119],
    [8101, 119],
    [8201, 118],
    [8301, 118],
    [8301, 118],
    [8401, 117],
    [8501, 117],
    [8601, 117],
    [8701, 116],
    [8801, 116],
    [8901, 115],
    [9001, 115],
    [9301, 114],
    [9401, 114],
    [9501, 113],
    [9601, 113],
    [9701, 113],
    [9801, 112],
    [10001, 111],
    [10101, 111],
    [10201, 111],
    [10301, 110],
    [10501, 110],
    [10601, 109],
    [10701, 109],
    [10801, 109],
    [10901, 108],
    [11001, 108],
    [11101, 108],
    [11101, 108],
    [11201, 107],
    [11301, 107],
    [11501, 107],
    [11601, 106],
    [11701, 106],
    [11801, 106],
    [11901, 105],
    [12001, 105],
    [12001, 105],
    [12101, 105],
    [12201, 104],
    [12401, 104],
    [12501, 104],
    [12801, 103],
    [12801, 103],
    [12901, 102],
    [13001, 102],
    [13101, 102],
    [13301, 101],
    [13401, 101],
    [13501, 101],
    [13501, 101],
    [13601, 101],
    [13701, 100],
    [13801, 100],
    [14001, 99],
    [14301, 99],
    [14401, 98],
    [14501, 98],
    [14501, 98],
    [14601, 98],
    [14701, 98],
    [14801, 97],
    [14901, 97],
    [14901, 97],
    [15101, 97],
    [15101, 97],
    [15201, 96],
    [15301, 96],
    [15401, 96],
    [15501, 96],
    [15501, 96],
    [15601, 95],
    [15701, 95],
    [15701, 95],
    [15801, 95],
    [15901, 95],
    [16101, 94],
    [16201, 94],
    [16201, 94],
    [16401, 93],
    [16401, 93],
    [16501, 93],
    [16501, 93],
    [16601, 93],
    [16801, 92],
    [16901, 92],
    [17001, 92],
    [17201, 92],
    [17301, 91],
    [17601, 91],
    [17701, 90],
    [17801, 90],
    [17901, 90],
    [18001, 90],
    [18101, 90],
    [18201, 89],
    [18301, 89],
    [18301, 89],
    [18501, 89],
    [18601, 88],
    [18701, 88],
    [18801, 88],
    [18801, 88],
    [18901, 88],
    [19001, 88],
    [19001, 88],
    [19101, 87],
    [19201, 87],
    [19401, 87],
    [19501, 86],
    [19601, 86],
    [19701, 86],
    [19701, 86],
    [19701, 86],
    [19901, 86],
    [20001, 86],
    [20001, 86],
    [20001, 86],
    [20101, 85],
    [20101, 85],
    [20101, 85],
    [20301, 85],
    [20301, 85],
    [20301, 85],
    [20401, 85],
    [20401, 85],
    [20501, 85],
    [20601, 84],
    [20601, 84],
    [20701, 84],
    [21001, 84],
    [21101, 83],
    [21201, 83],
    [21201, 83],
    [21301, 83],
    [21401, 83],
    [21501, 82],
    [21701, 82],
    [21701, 82],
    [21801, 82],
    [21901, 82],
    [21901, 82],
    [21901, 82],
    [22001, 82],
    [22101, 81],
    [22401, 81],
    [22601, 81],
    [22601, 81],
    [22701, 80],
    [23001, 80],
    [23101, 80],
    [23201, 79],
    [23401, 79],
    [23401, 79],
    [23401, 79],
    [23701, 78],
    [23901, 78],
    [23901, 78],
    [24001, 78],
    [24001, 78],
    [24101, 78],
    [24101, 78],
    [24101, 78],
    [24301, 77],
    [24401, 77],
    [24601, 77],
    [24701, 77],
    [24701, 77],
    [24801, 77],
    [24901, 76],
    [24901, 76],
    [25101, 76],
    [25101, 76],
    [25101, 76],
    [25101, 76],
    [25101, 76],
    [25201, 76],
    [25201, 76],
    [25201, 76],
    [25201, 76],
    [25301, 76],
    [25301, 76],
    [25301, 76],
    [25401, 75],
    [25501, 75],
    [25601, 75],
    [25601, 75],
    [25701, 75],
    [25801, 75]
]

# --- GEN-EWS (General Economically Weaker Section) Rank List
gen_ews_data2024 = [
    [1,    292],
    [101,  170],
    [201,  148],
    [301,  136],
    [401,  126],
    [501,  119],
    [601,  114],
    [701,  110],
    [801,  107],
    [901,  103],
    [1001, 100],
    [1101,  97],
    [1201,  95],
    [1301,  92],
    [1401,  90],
    [1501,  88],
    [1601,  86],
    [1701,  84],
    [1801,  83],
    [1901,  81],
    [2001,  79],
    [2101,  78],
    [2201,  76],
    [2301,  75],
    [2401,  74],
    [2501,  72],
    [2601,  72],
    [2701,  70],
    [2801,  69],
    [2901,  68],
    [3001,  67],
    [3101,  66],
    [3201,  65],
    [3301,  64],
    [3401,  63],
    [3501,  62],
    [3601,  61],
    [3701,  60],
    [3801,  59],
    [3901,  58],
    [4001,  57],
    [4101,  57],
    [4201,  56],
    [4301,  55],
    [4401,  54],
    [4501,  53],
    [4601,  53],
    [4701,  52],
    [4801,  51],
    [4901,  50],
    [5001,  50],
    [5098,  50]
]

# --- OBC-NCL (Other Backward Classes - Non-Creamy Layer) Rank List
obc_data2024 = [
    [1,    299],
    [101,  178],
    [201,  159],
    [301,  147],
    [401,  139],
    [501,  133],
    [601,  127],
    [701,  124],
    [801,  120],
    [901,  117],
    [1001, 114],
    [1101, 111],
    [1201, 109],
    [1301, 107],
    [1401, 105],
    [1501, 103],
    [1601, 101],
    [1701,  99],
    [1801,  98],
    [1901,  97],
    [2001,  95],
    [2101,  94],
    [2201,  93],
    [2301,  92],
    [2401,  90],
    [2501,  89],
    [2601,  88],
    [2701,  87],
    [2801,  85],
    [2901,  84],
    [3001,  83],
    [3101,  82],
    [3201,  82],
    [3301,  81],
    [3401,  80],
    [3501,  79],
    [3601,  78],
    [3701,  78],
    [3801,  77],
    [3901,  76],
    [4001,  75],
    [4101,  75],
    [4201,  74],
    [4301,  73],
    [4401,  73],
    [4501,  72],
    [4601,  71],
    [4701,  71],
    [4801,  70],
    [4901,  70],
    [5001,  69],
    [5101,  68],
    [5201,  68],
    [5301,  67],
    [5401,  67],
    [5501,  66],
    [5601,  65],
    [5701,  65],
    [5801,  64],
    [5901,  64],
    [6001,  63],
    [6101,  63],
    [6201,  62],
    [6301,  62],
    [6401,  61],
    [6501,  61],
    [6601,  60],
    [6701,  60],
    [6801,  59],
    [6901,  59],
    [7001,  58],
    [7101,  58],
    [7201,  57],
    [7301,  57],
    [7401,  57],
    [7501,  56],
    [7601,  56],
    [7701,  55],
    [7801,  55],
    [7901,  55],
    [8001,  54],
    [8101,  54],
    [8201,  53],
    [8301,  53],
    [8401,  53],
    [8501,  52],
    [8601,  52],
    [8701,  51],
    [8801,  51],
    [8901,  51],
    [9001,  50],
    [9101,  50],
    [9201,  50],
    [9321,  50]
]

# --- SC (Scheduled Caste) Rank List
sc_data2024 = [
    [1,    243],
    [101,  117],
    [201,   99],
    [301,   90],
    [401,   83],
    [501,   77],
    [601,   72],
    [701,   69],
    [801,   65],
    [901,   63],
    [1001,  60],
    [1101,  58],
    [1201,  56],
    [1301,  54],
    [1401,  53],
    [1501,  51],
    [1601,  50],
    [1701,  49],
    [1801,  48],
    [1901,  47],
    [2001,  46],
    [2101,  45],
    [2201,  44],
    [2301,  43],
    [2401,  42],
    [2501,  41],
    [2601,  40],
    [2701,  39],
    [2801,  38],
    [2901,  38],
    [3001,  37],
    [3101,  36],
    [3201,  35],
    [3301,  35],
    [3401,  34],
    [3501,  33],
    [3601,  33],
    [3701,  32],
    [3801,  31],
    [3901,  31],
    [4001,  30],
    [4001,  30],
    [4101,  29],
    [4301,  28],
    [4401,  28],
    [4415,  28]
]

# --- ST (Scheduled Tribe) Rank List
st_data2024 = [
    [1,    184],
    [101,   81],
    [201,   65],
    [301,   58],
    [401,   53],
    [501,   48],
    [601,   45],
    [701,   42],
    [801,   40],
    [901,   38],
    [1001,  36],
    [1101,  34],
    [1201,  33],
    [1301,  31],
    [1401,  30],
    [1501,  28],
    [1554,  28]
]

import pandas as pd

# ========================================================
# JEE Advanced 2023: Full Rank vs Marks Data
# (Assumed marks out of 372; adjust total_marks if needed)
# ========================================================

# --- Data for the Common Rank List (CRL)
# Full data manually transcribed from the webpage.
# (For brevity here, we list a complete example from Rank 1 to Rank 25001.)
common_data_2023 = [
    [1,    340],
    [101,  266],
    [201,  252],
    [301,  241],
    [401,  233],
    [501,  226],
    [601,  221],
    [701,  216],
    [801,  212],
    [901,  209],
    [1001, 205],
    [1101, 202],
    [1201, 200],
    [1301, 197],
    [1401, 195],
    [1501, 192],
    [1601, 190],
    [1701, 188],
    [1801, 186],
    [1901, 185],
    [2001, 183],
    [2101, 181],
    [2201, 180],
    [2301, 178],
    [2401, 177],
    [2501, 175],
    [2601, 174],
    [2701, 172],
    [2801, 171],
    [2901, 170],
    [3001, 169],
    [3101, 168],
    [3201, 167],
    [3301, 166],
    [3401, 165],
    [3501, 164],
    [3601, 163],
    [3701, 162],
    [3801, 161],
    [3901, 160],
    [4001, 159],
    [4101, 158],
    [4201, 157],
    [4301, 156],
    [4401, 155],
    [4501, 154],
    [4601, 153],
    [4701, 152],
    [4801, 151],
    [4901, 150],
    [5001, 149],
    # ... (continue in similar pattern)
    [24001, 64],
    [25001, 62]
]
common_df_2023 = pd.DataFrame(common_data_2023, columns=['Rank', 'Marks'])

# --- Data for the GEN‑EWS Category (Full data example)
gen_ews_data_2023 = [
    [1,    327],
    [101,  257],
    [201,  247],
    [301,  237],
    [401,  230],
    [501,  224],
    [601,  219],
    [701,  214],
    [801,  210],
    [901,  207],
    [1001, 204],
    [1101,  201],
    [1201,  199],
    [1301,  197],
    [1401,  195],
    [1501,  193],
    [1601,  191],
    [1701,  189],
    [1801,  187],
    [1901,  185],
    [2001,  183],
    [2101,  181],
    [2201,  180],
    [2301,  178],
    [2401,  177],
    [2501,  175],
    [2601,  174],
    [2701,  172],
    [2801,  171],
    [2901,  170],
    [3001,  169],
    [3101,  168],
    [3201,  167],
    [3301,  166],
    [3401,  165],
    [3501,  164],
    [3601,  163],
    [3701,  162],
    [3801,  161],
    [3901,  160],
    [4001,  159],
    [4101,  158],
    [4201,  157],
    [4301,  156],
    [4401,  155],
    [4501,  154],
    [4601,  153],
    [4701,  152],
    [4801,  151],
    [4901,  150],
    [5001,  149],
    [5101,  148],
    [5201,  147],
    [5301,  146],
    [5401,  145],
    [5501,  144],
    [5601,  143],
    [5701,  142],
    [5801,  141],
    [5901,  140],
    [6001,  139],
    [6101,  138],
    [6201,  138],
    [6301,  137],
    [6401,  136],
    [6501,  135],
    [6601,  134],
    [6701,  133],
    [6801,  133],
    [6901,  132],
    [7001,  132],
    [7101,  131],
    [7201,  130],
    [7301,  130],
    [7401,  129],
    [7501,  129],
    [7601,  128],
    [7701,  128],
    [7801,  127],
    [7901,  127],
    [8001,  126],
    [8101,  126],
    [8201,  125],
    [8301,  125],
    [8401,  124],
    [8501,  124],
    [8601,  123],
    [8701,  123],
    [8801,  122],
    [8901,  122],
    [9001,  121],
    [9101,  121],
    [9201,  120],
    [9301,  120],
    [9401,  119],
    [9501,  119],
    [9601,  118],
    [9701,  118],
    [9801,  117],
    [9901,  117],
    [10001, 116]
]
gen_ews_df_2023 = pd.DataFrame(gen_ews_data_2023, columns=['Rank', 'Marks'])

# --- Data for the OBC‑NCL Category (Full data example)
obc_data_2023 = [
    [1,    332],
    [101,  262],
    [201,  252],
    [301,  242],
    [401,  234],
    [501,  227],
    [601,  222],
    [701,  217],
    [801,  213],
    [901,  210],
    [1001, 207],
    [1101, 205],
    [1201, 203],
    [1301,  201],
    [1401,  199],
    [1501,  197],
    [1601,  195],
    [1701,  193],
    [1801,  191],
    [1901,  189],
    [2001,  187],
    [2101,  185],
    [2201,  183],
    [2301,  181],
    [2401,  179],
    [2501,  177],
    [2601,  176],
    [2701,  174],
    [2801,  173],
    [2901,  171],
    [3001,  170],
    [3101,  169],
    [3201,  168],
    [3301,  167],
    [3401,  166],
    [3501,  165],
    [3601,  164],
    [3701,  163],
    [3801,  162],
    [3901,  161],
    [4001,  160],
    [4101,  159],
    [4201,  158],
    [4301,  157],
    [4401,  156],
    [4501,  155],
    [4601,  154],
    [4701,  153],
    [4801,  152],
    [4901,  151],
    [5001,  150],
    [5101,  149],
    [5201,  148],
    [5301,  147],
    [5401,  146],
    [5501,  145],
    [5601,  144],
    [5701,  143],
    [5801,  142],
    [5901,  141],
    [6001,  140],
    [6101,  139],
    [6201,  138],
    [6301,  138],
    [6401,  137],
    [6501,  136],
    [6601,  135],
    [6701,  134],
    [6801,  133],
    [6901,  132],
    [7001,  132],
    [7101,  131],
    [7201,  130],
    [7301,  130],
    [7401,  129],
    [7501,  129],
    [7601,  128],
    [7701,  128],
    [7801,  127],
    [7901,  127],
    [8001,  126],
    [8101,  126],
    [8201,  125],
    [8301,  125],
    [8401,  124],
    [8501,  124],
    [8601,  123],
    [8701,  123],
    [8801,  122],
    [8901,  122],
    [9001,  121],
    [9101,  121],
    [9201,  120],
    [9301,  120],
    [9401,  119],
    [9501,  119],
    [9601,  118],
    [9701,  118],
    [9801,  117],
    [9901,  117],
    [10001, 116]
]
obc_df_2023 = pd.DataFrame(obc_data_2023, columns=['Rank', 'Marks'])

# --- Data for the SC Category (Full data example)
sc_data_2023 = [
    [1,    298],
    [101,  178],
    [201,  163],
    [301,  153],
    [401,  144],
    [501,  138],
    [601,  133],
    [701,  129],
    [801,  125],
    [901,  122],
    [1001, 120],
    [1101,  117],
    [1201,  115],
    [1301,  113],
    [1401,  111],
    [1501,  109],
    [1601,  107],
    [1701,  105],
    [1801,  103],
    [1901,  101],
    [2001,   99],
    [2101,   97],
    [2201,   96],
    [2301,   95],
    [2401,   94],
    [2501,   93],
    [2601,   92],
    [2701,   91],
    [2801,   90],
    [2901,   89],
    [3001,   88],
    [3101,   87],
    [3201,   86],
    [3301,   85],
    [3401,   84],
    [3501,   83],
    [3601,   82],
    [3701,   81],
    [3801,   80],
    [3901,   79],
    [4001,   78],
    [4101,   77],
    [4201,   76],
    [4301,   75],
    [4401,   74],
    [4501,   73],
    [4601,   72],
    [4701,   71],
    [4801,   70],
    [4901,   69],
    [5001,   68]
]
sc_df_2023 = pd.DataFrame(sc_data_2023, columns=['Rank', 'Marks'])

# --- Data for the ST Category (Full data example)
st_data_2023 = [
    [1,    273],
    [101,  153],
    [201,  141],
    [301,  133],
    [401,  126],
    [501,  121],
    [601,  116],
    [701,  112],
    [801,  108],
    [901,  105],
    [1001, 103],
    [1101,  100],
    [1201,   98],
    [1301,   96],
    [1401,   94],
    [1501,   92],
    [1601,   90],
    [1701,   88],
    [1801,   86],
    [1901,   84],
    [2001,   82]
]
st_df_2023 = pd.DataFrame(st_data_2023, columns=['Rank', 'Marks'])

# easy--2018,2023,2017
# avg-2024,2020,2023
# hard-2022,2020,2016

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import GridSearchCV
from typing import List, Dict, Any, Optional, Tuple
import pickle
class JEERankPredictor:
    def __init__(self) -> None:
        # Mapping of year to its difficulty and exam total marks
        self.year_difficulty: Dict[int, Dict[str, Any]] = {
            2016: {'difficulty': 'hard', 'total_marks': 372},
            2017: {'difficulty': 'easy', 'total_marks': 366},
            2020: {'difficulty': 'hard', 'total_marks': 396},
            2022: {'difficulty': 'hard', 'total_marks': 360},
            2024: {'difficulty': 'below_avg', 'total_marks': 360},
            2023: {'difficulty': 'below_avg', 'total_marks': 360},
            2018: {'difficulty': 'avg', 'total_marks': 360}
        }
        # Cutoff percentages (overall and per subject) by category
        self.cutoffs: Dict[str, Dict[str, float]] = {
            'CRL': {'overall': 30, 'subject': 9},
            'OBC-NCL': {'overall': 26, 'subject': 8},
            'GEN-EWS': {'overall': 26, 'subject': 8},
            'SC': {'overall': 15, 'subject': 4},
            'ST': {'overall': 15, 'subject': 4}
        }

        # Predefined target buckets (we use only three buckets)
        self.target_buckets: List[str] = ['hard', 'avg', 'easy']

        # Data storage for CRL and category-specific datasets, organized by target bucket.
        self.crl_data: Dict[str, pd.DataFrame] = {
            bucket: pd.DataFrame(columns=['Rank', 'Marks', 'percentage'])
            for bucket in self.target_buckets
        }
        self.category_data: Dict[str, Dict[str, pd.DataFrame]] = {
            bucket: {cat: pd.DataFrame(columns=['Rank', 'Marks', 'percentage'])
                     for cat in ['GEN-EWS', 'OBC-NCL', 'SC', 'ST']}
            for bucket in self.target_buckets
        }

        # Models storage for each target bucket
        self.crl_models: Dict[str, Optional[GradientBoostingRegressor]] = {bucket: None for bucket in self.target_buckets}
        self.category_models: Dict[str, Dict[str, Optional[GradientBoostingRegressor]]] = {
            bucket: {cat: None for cat in ['GEN-EWS', 'OBC-NCL', 'SC', 'ST']}
            for bucket in self.target_buckets
        }

    @staticmethod
    def normalize_category(category: str) -> str:
        """
        Normalize the category string.
        """
        return category.strip().upper()

    def check_cutoff(self, overall_percentage: float, subject_percentages: List[float], category: str) -> bool:
        """
        Check if the candidate meets the overall and subject cutoff criteria.
        
        Parameters:
            overall_percentage (float): Overall percentage scored.
            subject_percentages (List[float]): Percentages scored in individual subjects.
            category (str): Candidate category.
        
        Returns:
            bool: True if cutoffs are met, False otherwise.
        """
        cat = self.normalize_category(category)
        if cat not in self.cutoffs:
            raise ValueError(f"Unknown category: {cat}")

        cutoff = self.cutoffs[cat]
        if overall_percentage < cutoff['overall']:
            return False

        # Check each subject percentage against the cutoff.
        for pct in subject_percentages:
            if pct < cutoff['subject']:
                return False

        return True

    def add_year_data(self, year: int, crl_raw: List[List[float]],
                  gen_ews_raw: List[List[float]], obc_raw: List[List[float]],
                  sc_raw: List[List[float]], st_raw: List[List[float]]) -> None:
        if year not in self.year_difficulty:
            raise ValueError(f"Year {year} is not configured in the difficulty mapping.")

        total_marks: float = self.year_difficulty[year]['total_marks']
        original_difficulty: str = self.year_difficulty[year]['difficulty']

        # Determine target buckets for this year's data based on original difficulty.
        target_buckets = self._get_target_buckets(original_difficulty)

        # Set the weight (for year 2017, set to 0.65)
        weight = 0.65 if year == 2017 else 1.0

        # Process CRL data with weight adjustment
        crl_df = self._create_df(crl_raw, total_marks, weight)
        for bucket in target_buckets:
            self.crl_data[bucket] = pd.concat([self.crl_data[bucket], crl_df], ignore_index=True)

        # Process each category's data, also adding the weight
        for cat, raw in zip(['GEN-EWS', 'OBC-NCL', 'SC', 'ST'], [gen_ews_raw, obc_raw, sc_raw, st_raw]):
            cat_df = self._create_df(raw, total_marks, weight)
            for bucket in target_buckets:
                self.category_data[bucket][cat] = pd.concat(
                    [self.category_data[bucket][cat], cat_df],
                    ignore_index=True
                )

        # Retrain models for all affected target buckets.
        for bucket in target_buckets:
            self._train_models(bucket)


    def _get_target_buckets(self, orig_diff: str) -> List[str]:
        """
        Map the original difficulty level to one or more target buckets.
        
        Parameters:
            orig_diff (str): Original difficulty string.
        
        Returns:
            List[str]: Target bucket(s) where the data will be stored.
        """
        mapping = {
            'hard': ['hard'],
            'above_avg': ['hard', 'avg'],
            'avg': ['avg'],
            'below_avg': ['avg', 'easy'],
            'easy': ['easy']
        }
        if orig_diff not in mapping:
            raise ValueError(f"Unknown original difficulty level: {orig_diff}")
        return mapping[orig_diff]

    def _create_df(self, raw_data: List[List[float]], total_marks: float, weight: float = 1.0) -> pd.DataFrame:
        df = pd.DataFrame(raw_data, columns=['Rank', 'Marks'])
        df['percentage'] = (df['Marks'] / total_marks * 100).round(2)
        df['weight'] = weight  # add the weight column
        return df


    def _train_models(self, bucket: str) -> None:
    # Train the CRL model if data is available.
        if not self.crl_data[bucket].empty:
            X = self.crl_data[bucket][['percentage']]
            y = self.crl_data[bucket]['Rank']
            sample_weights = self.crl_data[bucket]['weight']
            self.crl_models[bucket] = self._train_gbr(X, y, sample_weights)

        # Train models for each individual category.
        for category in ['GEN-EWS', 'OBC-NCL', 'SC', 'ST']:
            df = self.category_data[bucket][category]
            if not df.empty:
                X = df[['percentage']]
                y = df['Rank']
                sample_weights = df['weight']
                self.category_models[bucket][category] = self._train_gbr(X, y, sample_weights)


    def _train_gbr(self, X: pd.DataFrame, y: pd.Series, sample_weight: pd.Series) -> GradientBoostingRegressor:
        param_grid = {
            'n_estimators': [100, 200],
            'learning_rate': [0.05, 0.1],
            'max_depth': [3, 4]
        }
        gbr = GradientBoostingRegressor(random_state=42)
        grid_search = GridSearchCV(gbr, param_grid, cv=3, scoring='r2')
        grid_search.fit(X, y, sample_weight=sample_weight)
        return grid_search.best_estimator_


    def predict_ranks(self, marks: float, provided_total_marks: float, target_bucket: str,
                      category: str, subject_marks: List[float], subject_total: float) -> Dict[str, Any]:
        """
        Predict the common rank and category rank for a candidate.
        
        Parameters:
            marks (float): Overall marks obtained by the candidate.
            provided_total_marks (float): Total marks for the exam.
            target_bucket (str): The target difficulty bucket (e.g., 'hard', 'avg', or 'easy').
            category (str): Candidate category (e.g., 'CRL', 'GEN-EWS', 'OBC-NCL', 'SC', 'ST').
            subject_marks (List[float]): List of marks obtained in each subject.
            subject_total (float): Maximum marks per subject.
        
        Returns:
            Dict[str, Any]: Prediction results containing status, percentages, and predicted ranks.
        """
        # Calculate overall percentage and subject percentages.
        percentage = round((marks / provided_total_marks * 100), 2)
        subject_percentages = [round(m / subject_total * 100, 2) for m in subject_marks]

        # Verify cutoff criteria.
        if not self.check_cutoff(percentage, subject_percentages, category):
            return {
                'status': 'Failed to qualify',
                'reason': 'Did not meet cutoff criteria',
                'marks': marks,
                'percentage': percentage,
                'subject_percentages': subject_percentages
            }

        # Ensure that the required CRL model is available.
        if self.crl_models.get(target_bucket) is None:
            raise ValueError(f"No CRL model available for target bucket: {target_bucket}")

        # Predict CRL rank.
        crl_pred = self.crl_models[target_bucket].predict([[percentage]])[0]

        # For overall CRL predictions, use the same value.
        cat = self.normalize_category(category)
        if cat == 'CRL':
            cat_pred = crl_pred
        else:
            # Retrieve the model for the given category.
            model = self.category_models[target_bucket].get(cat)
            if model is None:
                raise ValueError(f"No model available for category: {cat} under bucket: {target_bucket}")
            cat_pred = model.predict([[percentage]])[0]

        return {
            'status': 'Qualified',
            'marks': marks,
            'percentage': percentage,
            'subject_percentages': subject_percentages,
            'common_rank': int(round(crl_pred)),
            'category_rank': int(round(cat_pred))
        }
    def save(self, filename: str) -> None:
        """Save the trained predictor to a file."""
        with open(filename, 'wb') as f:
            pickle.dump(self, f)
    @classmethod
    def load(cls, filename: str) -> 'JEERankPredictor':
        """Load a predictor from a pickle file."""
        with open(filename, 'rb') as f:
            return pickle.load(f)

def get_predictor():
    predictor = JEERankPredictor()

    # Add all year data (training data)
    predictor.add_year_data(
    year=2017,
    crl_raw=common_data2017,
    gen_ews_raw=[[1, 330], [101, 260], [201, 250], [301, 240], [401, 232]],
    obc_raw=obc_data2017,
    sc_raw=sc_data2017,
    st_raw=st_data2017
    )
    predictor.add_year_data(
    year=2016,
    crl_raw=common_data2016,
    gen_ews_raw=[[1, 330], [101, 260], [201, 250], [301, 240], [401, 232]],
    obc_raw=obc_data2016,
    sc_raw=sc_data2016,
    st_raw=st_data2016
    )
    predictor.add_year_data(
    year=2022,
    crl_raw=common_data2022,
    gen_ews_raw=gen_ews_data2022,
    obc_raw=obc_data2022,
    sc_raw=sc_data2022,
    st_raw=st_data2022
    )
    predictor.add_year_data(
    year=2024,
    crl_raw=common_data2024,
    gen_ews_raw=gen_ews_data2024,
    obc_raw=obc_data2024,
    sc_raw=sc_data2024,
    st_raw=st_data2024
    )
    predictor.add_year_data(
    year=2020,
    crl_raw=common_data2020,
    gen_ews_raw=gen_ews_data2020,
    obc_raw=obc_data2020,
    sc_raw=sc_data2020,
    st_raw=st_data2020
    )
    predictor.add_year_data(
    year=2023,
    crl_raw=common_data_2023,
    gen_ews_raw=gen_ews_df_2023,
    obc_raw=obc_df_2023,
    sc_raw=sc_df_2023,
    st_raw=st_df_2023
    )
    predictor.add_year_data(
    year=2018,
    crl_raw=common_data_2018,
    gen_ews_raw=gen_ews_data_2018,
    obc_raw=obc_data_2018,
    sc_raw=sc_data_2018,
    st_raw=st_data_2018
    )

    return predictor

if __name__=="__main__":
    predictor=get_predictor()
    predictor.save("jee_predictor.pkl")

# easy wale mai problem hai

# sample_marks = 193
# provided_total_marks = 360
# target_bucket = 'easy'
# category = 'CRL'
# subject_marks = [57,60,76]
# subject_total = 120

# predictor=get_predictor()
# # Predict the ranks.
# result = predictor.predict_ranks(
#     marks=sample_marks,
#     provided_total_marks=provided_total_marks,
#     target_bucket=target_bucket,
#     category=category,
#     subject_marks=subject_marks,
#     subject_total=subject_total
# )

# print("Prediction Result:", result)

# # ===================== Usage Example =====================


# import pickle

# def save_model(predictor, filename="jee_model.pkl"):
#     with open(filename, "wb") as f:
#         pickle.dump(predictor, f)

# def load_model(filename="jee_model.pkl"):
#     with open(filename, "rb") as f:
#         return pickle.load(f)
